/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UNED.ControlCotizaciones.UI;

import UNED.ControlCotizaciones.Clases.Prestamo;
import UNED.ControlCotizaciones.Clases.PrestamoPersonal;
import UNED.ControlCotizaciones.Clases.PrestamoPymes;
import UNED.ControlCotizaciones.Clases.PrestamoVivienda;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Fabián de Jesús Maroto Fernández
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    private Prestamo prestamo;
    private PrestamoPersonal personal;
    private PrestamoVivienda vivienda;
    private PrestamoPymes pymes;
    
    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        this.setTitle("Registro de cotizaciones de préstamos");
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        lblTitulo = new javax.swing.JLabel();
        lblSubtitulo = new javax.swing.JLabel();
        lblNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        lblIdentificacion = new javax.swing.JLabel();
        txtIdentificacion = new javax.swing.JTextField();
        lblApellido1 = new javax.swing.JLabel();
        lblApellido2 = new javax.swing.JLabel();
        txtApellido1 = new javax.swing.JTextField();
        txtApellido2 = new javax.swing.JTextField();
        lblEdad = new javax.swing.JLabel();
        txtEdad = new javax.swing.JFormattedTextField();
        lblIngresoMensual = new javax.swing.JLabel();
        txtIngreso = new javax.swing.JFormattedTextField();
        lblMonto = new javax.swing.JLabel();
        txtMonto = new javax.swing.JFormattedTextField();
        lblMeses = new javax.swing.JLabel();
        txtMeses = new javax.swing.JFormattedTextField();
        lblTipoPrestamo = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        comboTipoPrestamo_ = new javax.swing.JComboBox<>();
        lblPersonal = new javax.swing.JLabel();
        lblTipoCliente = new javax.swing.JLabel();
        lblProductos = new javax.swing.JLabel();
        lblVivienda = new javax.swing.JLabel();
        lblMetros = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        lblPymes = new javax.swing.JLabel();
        lblEmpleados = new javax.swing.JLabel();
        txtMetros = new javax.swing.JFormattedTextField();
        txtEmpleados = new javax.swing.JFormattedTextField();
        btnRegistrar = new javax.swing.JButton();
        comboTipoCliente_ = new javax.swing.JComboBox<>();
        txtBusquedaId = new javax.swing.JTextField();
        txtProductos = new javax.swing.JFormattedTextField();
        jSeparator4 = new javax.swing.JSeparator();
        lblTitulo2 = new javax.swing.JLabel();
        lblSubtitulo2 = new javax.swing.JLabel();
        lblIdentificacion2 = new javax.swing.JLabel();
        lblImagen = new javax.swing.JLabel();
        btnCalcular = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuSalir_ = new javax.swing.JMenuItem();
        menuClientes = new javax.swing.JMenu();
        menuMostrarCliente_ = new javax.swing.JMenuItem();
        menuActualizar = new javax.swing.JMenuItem();
        menuBorrar = new javax.swing.JMenuItem();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitulo.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(0, 102, 153));
        lblTitulo.setText("Registro de clientes");

        lblSubtitulo.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblSubtitulo.setText("Por favor, ingrese los datos.");

        lblNombre.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblNombre.setText("Nombre");

        txtNombre.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblIdentificacion.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblIdentificacion.setText("Identificación");

        txtIdentificacion.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblApellido1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblApellido1.setText("Primer apellido");

        lblApellido2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblApellido2.setText("Segundo apellido");

        txtApellido1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        txtApellido2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblEdad.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblEdad.setText("Edad");

        txtEdad.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblIngresoMensual.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblIngresoMensual.setText("Ingreso mensual");

        txtIngreso.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblMonto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMonto.setText("Monto del préstamo");

        txtMonto.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblMeses.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMeses.setText("¿En cuántos meses desea cancelar el préstamo?");

        txtMeses.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblTipoPrestamo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblTipoPrestamo.setText("Tipo de préstamo");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        comboTipoPrestamo_.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comboTipoPrestamo_.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Personal", "Vivienda", "Pymes" }));
        comboTipoPrestamo_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoPrestamo_ActionPerformed(evt);
            }
        });

        lblPersonal.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblPersonal.setForeground(new java.awt.Color(0, 102, 204));
        lblPersonal.setText("Préstamo personal");

        lblTipoCliente.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblTipoCliente.setText("Tipo de cliente");

        lblProductos.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblProductos.setText("No. de productos adquiridos");

        lblVivienda.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblVivienda.setForeground(new java.awt.Color(0, 102, 204));
        lblVivienda.setText("Préstamo para vivienda");

        lblMetros.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblMetros.setText("Metros cuadrados de la propiedad");

        lblPymes.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        lblPymes.setForeground(new java.awt.Color(0, 102, 204));
        lblPymes.setText("Préstamo para pymes");

        lblEmpleados.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblEmpleados.setText("Cantidad de empleados");

        txtMetros.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        txtEmpleados.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        btnRegistrar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        comboTipoCliente_.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        comboTipoCliente_.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Nuevo" }));
        comboTipoCliente_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoCliente_ActionPerformed(evt);
            }
        });

        txtBusquedaId.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        txtProductos.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        lblTitulo2.setFont(new java.awt.Font("Arial", 3, 18)); // NOI18N
        lblTitulo2.setForeground(new java.awt.Color(0, 102, 153));
        lblTitulo2.setText("Cotización de préstamos");

        lblSubtitulo2.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblSubtitulo2.setText("Por favor, complete el formulario.");

        lblIdentificacion2.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblIdentificacion2.setText("Identificación del usuario");

        lblImagen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UNED/ControlCotizaciones/Imagenes/ventana_principal.png"))); // NOI18N

        btnCalcular.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        btnCalcular.setText("Calcular");
        btnCalcular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalcularActionPerformed(evt);
            }
        });

        menuArchivo.setText("Archivo");
        menuArchivo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        menuSalir_.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        menuSalir_.setText("Salir");
        menuSalir_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSalir_ActionPerformed(evt);
            }
        });
        menuArchivo.add(menuSalir_);

        jMenuBar1.add(menuArchivo);

        menuClientes.setText("Clientes");
        menuClientes.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        menuMostrarCliente_.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        menuMostrarCliente_.setText("Mostrar cliente");
        menuMostrarCliente_.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuMostrarCliente_ActionPerformed(evt);
            }
        });
        menuClientes.add(menuMostrarCliente_);

        menuActualizar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        menuActualizar.setText("Actualizar cliente");
        menuActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActualizarActionPerformed(evt);
            }
        });
        menuClientes.add(menuActualizar);

        menuBorrar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        menuBorrar.setText("Borrar cliente");
        menuBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBorrarActionPerformed(evt);
            }
        });
        menuClientes.add(menuBorrar);

        jMenuBar1.add(menuClientes);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(lblIngresoMensual)
                                        .addGap(23, 23, 23))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblEdad)
                                            .addComponent(lblApellido2)
                                            .addComponent(lblApellido1)
                                            .addComponent(lblNombre)
                                            .addComponent(lblIdentificacion))
                                        .addGap(21, 21, 21)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnRegistrar)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtApellido2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtApellido1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(txtIngreso, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(lblTitulo)
                            .addComponent(lblSubtitulo)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(lblImagen)))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblIdentificacion2)
                                            .addComponent(lblTipoPrestamo)
                                            .addComponent(lblMonto))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtMonto, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(txtBusquedaId, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(comboTipoPrestamo_, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jSeparator4)
                                    .addComponent(jSeparator3)
                                    .addComponent(jSeparator5)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblTipoCliente)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(comboTipoCliente_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblProductos)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblMetros)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtMetros, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPersonal)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblEmpleados)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblMeses)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                                        .addComponent(txtMeses, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPymes)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTitulo2)
                                    .addComponent(lblSubtitulo2)
                                    .addComponent(lblVivienda))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCalcular)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblTitulo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSubtitulo)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIdentificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIdentificacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNombre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApellido1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblApellido1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApellido2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblApellido2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEdad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEdad))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtIngreso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIngresoMensual))
                        .addGap(18, 18, 18)
                        .addComponent(btnRegistrar)
                        .addGap(18, 18, 18)
                        .addComponent(lblImagen)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblTitulo2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSubtitulo2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBusquedaId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIdentificacion2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboTipoPrestamo_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTipoPrestamo))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMonto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMonto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMeses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMeses))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPersonal)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblTipoCliente)
                            .addComponent(comboTipoCliente_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProductos)
                            .addComponent(txtProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblVivienda, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtMetros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMetros))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblPymes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblEmpleados)
                            .addComponent(txtEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(btnCalcular))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /* La imagen de para este JFrame, fue tomada de 
    https://pixabay.com/es/vectors/administraci%c3%b3n-bancario-facultad-152960/
    */
    
    // Método para habilitar e inhabilitar campos o menú de acuerdo a la selección del usuario.
    private void comboTipoPrestamo_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoPrestamo_ActionPerformed
        try {    
            if (this.comboTipoPrestamo_.getSelectedIndex() == 0) { //Préstamo Personal.
                this.comboTipoCliente_.setEnabled(true); // Habilita comboTipoCliente_.
                this.txtProductos.setEnabled(true); // Habilita el campo txtProductos.
                this.txtMetros.setEnabled(false); // Inhabilita el campo txtMetros.
                this.txtEmpleados.setEnabled(false); // Inhabilita el campo txtEmpleados.
            }

            if (this.comboTipoPrestamo_.getSelectedIndex() == 1) { // Préstamo Vivienda.
                this.comboTipoCliente_.setEnabled(false); // Inhabilita comboTipoCliente_.
                this.txtProductos.setEnabled(false); // Inhabilita el campo txtProductos.
                this.txtMetros.setEnabled(true); // Habilita el campo txtMetros.
                this.txtEmpleados.setEnabled(false); // Inhabilita el campo txtEmpleados.
            }

            if (this.comboTipoPrestamo_.getSelectedIndex() == 2) { // Préstamo Pymes.
                this.comboTipoCliente_.setEnabled(false); // Inhabilita comboTipoCliente_.
                this.txtProductos.setEnabled(false); // Inhabilita el campo txtProductos.
                this.txtMetros.setEnabled(false); // Inhabilita el campo txtMetros.
                this.txtEmpleados.setEnabled(true); // Habilita el campo txtEmpleados.
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error en el programa.");
        }
    }//GEN-LAST:event_comboTipoPrestamo_ActionPerformed
    
    // Ítem del menú Archivo para salir del programa según la selección del usuario.
    private void menuSalir_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSalir_ActionPerformed
        int salir = JOptionPane.showConfirmDialog(null, "¿Desea salir del programa?", "¡ALERTA!", JOptionPane.YES_NO_OPTION);
        if (salir == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_menuSalir_ActionPerformed
    
    // Método para habilitar e inhabilitar campos del préstamo personal.
    private void comboTipoCliente_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoCliente_ActionPerformed
        try {
            if (this.comboTipoCliente_.getSelectedIndex() == 0) { // Cliente activo.
                this.txtProductos.setEnabled(true); // Se habilita el campo txtProductos al ser cliente activo.
            } else {
                this.txtProductos.setEnabled(false); // Se deshabilita en caso de ser cliente nuevo.
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ha ocurrido un error en el programa.");
        } 
    }//GEN-LAST:event_comboTipoCliente_ActionPerformed
    
    // Método que proporciona las funcionalidades al botón Registrar.
    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        try {
            crearArchivos();
            capturarDatos();
            guardarDatos();
            // Las siguientes líneas "limpian" los campos del formulario.
            this.txtIdentificacion.setText(""); 
            this.txtNombre.setText("");
            this.txtApellido1.setText("");
            this.txtApellido2.setText("");
            this.txtEdad.setText("");
            this.txtIngreso.setText("");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al registrar el usuario.");
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed
    
    // Método que proporciona las funionalidades al ítem Mostrar cliente del menú Clientes.
    private void menuMostrarCliente_ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuMostrarCliente_ActionPerformed
        MostrarCliente mostrar = new MostrarCliente();
        mostrar.setVisible(true); // Muestra en pantalla el JFrame MostrarCliente.
    }//GEN-LAST:event_menuMostrarCliente_ActionPerformed
    
    // Método que proporciona las funcionalidades al botón Calcular.
    private void btnCalcularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalcularActionPerformed
        try {
            if (this.comboTipoPrestamo_.getSelectedIndex() == 0) { // Préatamo Personal.
                calcularPrestamo_Personal();
                this.txtMetros.setText("");
                this.txtEmpleados.setText("");
            }
            if (this.comboTipoPrestamo_.getSelectedIndex() == 1) { // Préstamo Vivienda.
                calcularPrestamo_Vivienda();
                this.txtProductos.setText("");
                this.txtEmpleados.setText("");
            }
            if (this.comboTipoPrestamo_.getSelectedIndex() == 2) { // Préstamo Pymes.
                calcularPrestamo_Pymes();
                this.txtProductos.setText("");
                this.txtMetros.setText("");
            }
            /* Las líneas 556, 557, 561, 562, 566 y 567, al igual que las que siguientes, 
            permiten "limpiar" los campos del formulario para cotizar un préstamo.
            */
            this.txtBusquedaId.setText("");
            this.txtMonto.setText("");
            this.txtMeses.setText("");
            this.txtProductos.setText("");
            this.txtMetros.setText("");
            this.txtEmpleados.setText("");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error en el programa.");
        }
    }//GEN-LAST:event_btnCalcularActionPerformed
    
    // Método que proporciona las funcionalidades al ítem Actualizar cliente del menú Clientes.
    private void menuActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActualizarActionPerformed
        ActualizarCliente actualizar = new ActualizarCliente();
        actualizar.setVisible(true); // Muestra en pantall el JFrame ActualizarCliente.
    }//GEN-LAST:event_menuActualizarActionPerformed
    
    // Método que proporciona las funcionalidades al ítem Borrar cliente del menú Clientes.
    private void menuBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBorrarActionPerformed
        BorrarCliente borrar = new BorrarCliente();
        borrar.setVisible(true); // Muestra en pantalla el JFrame BorrarCliente.
    }//GEN-LAST:event_menuBorrarActionPerformed
    
    // Método para crear los archivos clientes_prestamos.dat y prestamos_aprobados.dat.
    public void crearArchivos() {
        try { // Crea los archivos en el directorio especificado en los paréntesis.
            File archivo1 = new File("C:\\Users\\monge\\Documents\\NetBeansProjects\\ControlCotizaciones\\clientes_prestamos.dat");
            File archivo2 = new File("C:\\Users\\monge\\Documents\\NetBeansProjects\\ControlCotizaciones\\prestamos_aprobados.dat");
            
            // Si el archivo1 (clientes_prestamos.dat) no existe, se crea.
            if (!archivo1.exists()) {
                archivo1.createNewFile();
            }
            // Si el archivo2 (prestamos_aprobados.dat) no existe, se crea.
            if (!archivo2.exists()) {
                archivo2.createNewFile();
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo crear el archivo(s).");
        }
    }
    
    // Método para capturar los datos ingresados a los campos del formulario de registro.
    public void capturarDatos() {
        try { // Los datos son validados y almacenados en la clase padre, la cual es Prestamo.
            prestamo = new Prestamo();
            
            if (this.txtIdentificacion.getText().length() <= 10) {
                prestamo.setIdentificacion(this.txtIdentificacion.getText());
            } else {
                JOptionPane.showMessageDialog(null, "La identificación no debe exceder los 10 caracteres");
            }
            
            if (this.txtNombre.getText().length() <= 50) {
                prestamo.setNombre(this.txtNombre.getText());
            } else {
                JOptionPane.showMessageDialog(null, "El nombre ni apellidos no debe exceder los 50 caracteres");
            }
            
            prestamo.setApellido1(this.txtApellido1.getText());
            prestamo.setApellido2(this.txtApellido2.getText());
            
            String cadenaEdad = this.txtEdad.getText();
            int valorEdad = Integer.parseInt(cadenaEdad);
            if (valorEdad >= 18 && valorEdad < 100) {
                prestamo.setEdad(valorEdad);
            } else {
                JOptionPane.showMessageDialog(null, "La edad debe ser de 18 a menos 100 años");
                // Se añadió para solucionar un error que surgió durante la ejecución.
                prestamo.setEdad(0);  
            }
            
            String cadenaIngreso = this.txtIngreso.getText();
            double valorIngreso = Double.parseDouble(cadenaIngreso);
            if (valorIngreso > 0) {
                prestamo.setIngresoMensual(valorIngreso);  
            } else {
                JOptionPane.showMessageDialog(null, "El ingreso mensual no puede ser 0.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error en el programa.");
        }
    }
    
    // Método para guardar los datos capturados en el archivo clientes_prestamos.dat.
    public void guardarDatos() {
        FileWriter archivo = null; // Clase para leer y escribir en el archivo. https://docs.oracle.com/javase/8/docs/api/java/io/FileWriter.html
        PrintWriter escribir = null; // Clase con la cual se escribe en el archivo. https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html
        try {
            archivo = new FileWriter("C:\\Users\\monge\\Documents\\NetBeansProjects\\ControlCotizaciones\\clientes_prestamos.dat", true);
            escribir = new PrintWriter(archivo);
            // Se utilizan métodos get de los datos del usuario para ser escritos en el archivo clientes_prestamos.dat.
            escribir.println(prestamo.getIdentificacion());
            escribir.println(prestamo.getNombre());
            escribir.println(prestamo.getApellido1());
            escribir.println(prestamo.getApellido2());
            escribir.println(prestamo.getEdad());
            escribir.println(prestamo.getIngresoMensual());
            JOptionPane.showMessageDialog(null, "¡El usuario se registró exitosamente!");
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error en el programa.");
        }
        finally {
            if (archivo != null) {
                try {
                    archivo.close();
                }
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se pudo cerrar el arcvivo.");
                }
            }
        }
    }
    
    // Método para guardar los datos de un préstamo personal en el archivo prestamos_aprobados.dat.
    public void guardarCotizacion_Personal() {
        FileWriter archivo = null; // Clase para leer y escribir en el archivo.
        PrintWriter escribir = null; // Clase con la cual se escribe en el archivo.
        try {
            archivo = new FileWriter("C:\\Users\\monge\\Documents\\NetBeansProjects\\ControlCotizaciones\\prestamos_aprobados.dat", true);
            escribir = new PrintWriter(archivo);
            /* Llamada a los métodos get de PrestamoPersonal específicos para 
            escribir los datos en el archivo prestamos_aprobados.dat.
            */
            escribir.println(personal.getIdentificacion());
            escribir.println("Préstamo Personal");
            escribir.println(personal.getRenta());
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error en el programa.");
        }
        finally {
            if (archivo != null) {
                try {
                    archivo.close();
                }
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se pudo cerrar el archivo.");
                }
            }
        }
    }
    
    // Método para calcular y validar las cotizaciones efectuadas de préstamos personales.
    public void calcularPrestamo_Personal() {
        FileReader leer = null; // Clase que permite abrir y leer el archivo. https://docs.oracle.com/javase/8/docs/api/java/io/FileReader.html
        BufferedReader cargar = null; // Clase que permite leer el archivo. https://guru99.es/buffered-reader-in-java/
        
        try {
            personal = new PrestamoPersonal();
            
            leer = new FileReader("C:\\Users\\monge\\Documents\\NetBeansProjects\\ControlCotizaciones\\clientes_prestamos.dat");
            cargar = new BufferedReader(leer);
            
            String cedula = this.txtBusquedaId.getText(); // La variable cedula almacena la identificación por buscar en el archivo.
            String linea = ""; // La variable linea permite almacenar lo que BufferedReader recupera del archivo.
            /* ArrayList donde se añaden los datos contenidos en el archivo para
            su manipulación.*/
            List<String> datos = new ArrayList<>(); 
            /* Ciclo con el cual se recopila la información del archivo para ser 
            almacenada en el ArrayList datos. La declaración fue tomada del
            siguiente video https://www.youtube.com/watch?v=PhnEJ_Cr65k del
            minuto 24:05.*/
            while ((linea=cargar.readLine()) != null) { 
                datos.add(linea);
            }
            /* La variable indice se emplea para almacenar el índice en el cual 
            se encuentra el elemento cedula del ArrayList datos.*/
            int indice = 0; 
            if (datos.contains(cedula)) { // Si cedula se encuentra en el ArrayList datos...
                /* El índice de cedula se almacenará en la variable indice.
                https://lineadecodigo.com/java/buscar-elementos-en-un-arraylist/*/
                indice = datos.indexOf(cedula);
                
                personal.setIdentificacion(cedula); // Se establecerá cedula como la identificación del cliente.
                /* Se establecerá el ingreso mensual del cliente a partir del valor 
                de la variable indice más cinco posiciones en el ArrayList datos.*/
                personal.setIngresoMensual(Double.parseDouble(datos.get(indice + 5)));
                // También, se validarán los campos txtMonto y txtMeses.
                String cadenaMonto = this.txtMonto.getText();
                double valorMonto = Double.parseDouble(cadenaMonto);
                if (valorMonto >= 300000 && valorMonto <= 15000000 ) {
                    personal.setMontoPrestamo(valorMonto);
                } else {
                    JOptionPane.showMessageDialog(null, "El monto a solicitar debe ser de 300.000 a 15.000.000");
                }
            
                String cadenaMes = this.txtMeses.getText();
                int valorMes = Integer.parseInt(cadenaMes);
                if (valorMes > 0) {
                    personal.setMeses(valorMes);
                } else {
                    JOptionPane.showMessageDialog(null, "El número de meses no puede ser 0.");
                }
                // Se verificará la selección del usuario en comboTipoCliente_
                personal.setTipoCliente(this.comboTipoCliente_.getSelectedIndex());
                if (this.comboTipoCliente_.getSelectedIndex() == 1) { // Cliente nuevo.
                    personal.setProductosCliente(0);
                } else {
                    // Cliente activo. Se establecerán la cantidad de productos del cliente con la entidad.
                    personal.setProductosCliente(Integer.parseInt(this.txtProductos.getText()));
                }
                personal.calcularRenta();
                personal.aprobarPrestamo(); // Método que permite validar si el préstamo será aprobado y almacenado.
                if (personal.isAprobado() == true) { // Si el préstamo es aprobado...
                    // Se pedirá el visto bueno del cliente sobre la cuota del préstamo en cuestión.
                    int r = JOptionPane.showConfirmDialog(null, 
                    "¿Está de acuerdo con la mensualidad del préstamo?", "¡Atención!", JOptionPane.YES_NO_OPTION);
                    if (r == 0) { // Si la respuesta del cliente es un "Sí"...
                        // Se almacenarán la cotización del préstamo en el archicvo prestamos_aprobados.dat.
                        guardarCotizacion_Personal();
                        JOptionPane.showMessageDialog(null, "Préstamo aprobado.");
                    } else {
                        JOptionPane.showMessageDialog(null, "Préstamo declinado.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El ingreso mensual es menor al 40% de la cuota del préstamo.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Identificación no registrada.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error en el programa.");
        }
        finally {
            if (leer != null) {
                try {
                    leer.close();
                }
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se pudo cerrar el archivo.");
                }
            }
        }
    }
    
    /* Las funcionalidades de los métodos guardarCotizacion_Vivienda y 
    guardarCotizacion_Pymes presentan una estructura similar a la del método 
    guardarCotizacion_Personal, sin embargo, difieren en el tipo de préstamo y 
    los métodos de las clases hijas que son requeridos para almacenar la 
    información en el archivo prestamos_aprobados.dat.
    
    Asimismo, los métodos calcularPrestamo_Vivienda y calcularPrestamo_Pymes
    también presentan una estructura casi idéntica a calcularPrestamo_Personal,
    no obstante, nos encontramos bajo la misma situación expuesta anteriormente,
    donde cada método requiere de los distintos métodos pertenecientes
    a clases hijas diferentes según el tipo de préstamo.
    */
    
    // Método para guardar los datos de un préstamo para vivienda en el archivo prestamos_aprobados.dat.
    public void guardarCotizacion_Vivienda() {
        FileWriter archivo = null;
        PrintWriter escribir = null;
        try {
            archivo = new FileWriter("C:\\Users\\monge\\Documents\\NetBeansProjects\\ControlCotizaciones\\prestamos_aprobados.dat", true);
            escribir = new PrintWriter(archivo);
            /* Llamada a los métodos get de PrestamoVivienda específicos para 
            escribir los datos en el archivo prestamos_aprobados.dat.
            */
            escribir.println(vivienda.getIdentificacion());
            escribir.println("Préstamo Vivienda");
            escribir.println(vivienda.getRenta());
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error en el programa.");
        }
        finally {
            if (archivo != null) {
                try {
                    archivo.close();
                }
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se pudo cerrar el archivo.");
                }
            }
        }
    }
    
    // Método para calcular y validar las cotizaciones efectuadas de préstamos para vivienda.
    public void calcularPrestamo_Vivienda() {
        FileReader leer = null;
        BufferedReader cargar = null;
        
        try {
            vivienda = new PrestamoVivienda();
            
            leer = new FileReader("C:\\Users\\monge\\Documents\\NetBeansProjects\\ControlCotizaciones\\clientes_prestamos.dat");
            cargar = new BufferedReader(leer);
            
            String cedula = this.txtBusquedaId.getText();
            String linea = "";
            
            List<String> datos = new ArrayList<>();
            
            while ((linea=cargar.readLine()) != null) {
                datos.add(linea);
            }
                        
            int indice = 0;
            if (datos.contains(cedula)) {
                indice = datos.indexOf(cedula);
                
                vivienda.setIdentificacion(cedula);
                vivienda.setIngresoMensual(Double.parseDouble(datos.get(indice + 5)));
                
                String cadenaMonto = this.txtMonto.getText();
                double valorMonto = Double.parseDouble(cadenaMonto);
                if (valorMonto >= 300000 && valorMonto <= 15000000 ) {
                    vivienda.setMontoPrestamo(valorMonto);
                } else {
                    JOptionPane.showMessageDialog(null, "El monto a solicitar debe ser de 300.000 a 15.000.000");
                }
            
                String cadenaMes = this.txtMeses.getText();
                int valorMes = Integer.parseInt(cadenaMes);
                if (valorMes > 0) {
                    vivienda.setMeses(valorMes);
                } else {
                    JOptionPane.showMessageDialog(null, "El número de meses no puede ser 0.");
                }
                
                vivienda.setTasaInteres(0.0525);
                vivienda.setMetrosCuadrados(Double.parseDouble(this.txtMetros.getText()));
                vivienda.calcularRenta();
                vivienda.aprobarPrestamo();
                
                if (vivienda.isAprobado() == true) {
                    int r = JOptionPane.showConfirmDialog(null, 
                    "¿Está de acuerdo con la mensualidad del préstamo?", "¡Atención!", JOptionPane.YES_NO_OPTION);
                    if (r == 0) {
                        guardarCotizacion_Vivienda();
                        JOptionPane.showMessageDialog(null, "Préstamo aprobado.");
                    } else {
                        JOptionPane.showMessageDialog(null, "Préstamo declinado.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El ingreso mensual es menor al 40% de la cuota del préstamo.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Identificación no registrada.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error en el programa.");
        }
        finally {
            if (leer != null) {
                try {
                    leer.close();
                }
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se pudo cerrar el archivo.");
                }
            }
        }
    }
    
    // Método para guardar los datos de un préstamo para pymes en el archivo prestamos_aprobados.dat.
    public void guardarCotizacion_Pymes() {
        FileWriter archivo = null;
        PrintWriter escribir = null;
        try {
            archivo = new FileWriter("C:\\Users\\monge\\Documents\\NetBeansProjects\\ControlCotizaciones\\prestamos_aprobados.dat", true);
            escribir = new PrintWriter(archivo);
            /* Llamada a los métodos get de PrestamoPymes específicos para 
            escribir los datos en el archivo prestamos_aprobados.dat.
            */
            escribir.println(pymes.getIdentificacion());
            escribir.println("Préstamo Pymes");
            escribir.println(pymes.getRenta());
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error en el programa.");
        }
        finally {
            if (archivo != null) {
                try {
                    archivo.close();
                }
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se pudo cerrar el archivo.");
                }
            }
        }
    }
    
    // Método para calcular y validar las cotizaciones efectuadas de préstamos para pymes.
    public void calcularPrestamo_Pymes() {
        FileReader leer = null;
        BufferedReader cargar = null;
        
        try {
            pymes = new PrestamoPymes();
            
            leer = new FileReader("C:\\Users\\monge\\Documents\\NetBeansProjects\\ControlCotizaciones\\clientes_prestamos.dat");
            cargar = new BufferedReader(leer);
            
            String cedula = this.txtBusquedaId.getText();
            String linea = "";
            
            List<String> datos = new ArrayList<>();
            
            while ((linea=cargar.readLine()) != null) {
                datos.add(linea);
            }
                        
            int indice = 0;
            if (datos.contains(cedula)) {
                indice = datos.indexOf(cedula);
                
                pymes.setIdentificacion(cedula);
                pymes.setIngresoMensual(Double.parseDouble(datos.get(indice + 5)));
                
                String cadenaMonto = this.txtMonto.getText();
                double valorMonto = Double.parseDouble(cadenaMonto);
                if (valorMonto >= 300000 && valorMonto <= 15000000 ) {
                    pymes.setMontoPrestamo(valorMonto);
                } else {
                    JOptionPane.showMessageDialog(null, "El monto a solicitar debe ser de 300.000 a 15.000.000");
                }
            
                String cadenaMes = this.txtMeses.getText();
                int valorMes = Integer.parseInt(cadenaMes);
                if (valorMes > 0) {
                    pymes.setMeses(valorMes);
                } else {
                    JOptionPane.showMessageDialog(null, "El número de meses no puede ser 0.");
                }
            
                pymes.setTasaInteres(0.08);
                pymes.setCantidadEmpleados(Integer.parseInt(this.txtEmpleados.getText()));
                pymes.calcularRenta();
                pymes.aprobarPrestamo();
                
                if (pymes.isAprobado() == true) {
                    int r = JOptionPane.showConfirmDialog(null, 
                    "¿Está de acuerdo con la mensualidad del préstamo?", "¡Atención!", JOptionPane.YES_NO_OPTION);
                    if (r == 0) {
                        guardarCotizacion_Pymes();
                        JOptionPane.showMessageDialog(null, "Préstamo aprobado.");
                    } else {
                        JOptionPane.showMessageDialog(null, "Préstamo declinado.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El ingreso mensual es menor al 40% de la cuota del préstamo.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Identificación no registrada.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Ocurrió un error en el programa.");
        }
        finally {
            if (leer != null) {
                try {
                    leer.close();
                }
                catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "No se pudo cerrar el archivo.");
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCalcular;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> comboTipoCliente_;
    private javax.swing.JComboBox<String> comboTipoPrestamo_;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JLabel lblApellido1;
    private javax.swing.JLabel lblApellido2;
    private javax.swing.JLabel lblEdad;
    private javax.swing.JLabel lblEmpleados;
    private javax.swing.JLabel lblIdentificacion;
    private javax.swing.JLabel lblIdentificacion2;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblIngresoMensual;
    private javax.swing.JLabel lblMeses;
    private javax.swing.JLabel lblMetros;
    private javax.swing.JLabel lblMonto;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblPersonal;
    private javax.swing.JLabel lblProductos;
    private javax.swing.JLabel lblPymes;
    private javax.swing.JLabel lblSubtitulo;
    private javax.swing.JLabel lblSubtitulo2;
    private javax.swing.JLabel lblTipoCliente;
    private javax.swing.JLabel lblTipoPrestamo;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JLabel lblTitulo2;
    private javax.swing.JLabel lblVivienda;
    private javax.swing.JMenuItem menuActualizar;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenuItem menuBorrar;
    private javax.swing.JMenu menuClientes;
    private javax.swing.JMenuItem menuMostrarCliente_;
    private javax.swing.JMenuItem menuSalir_;
    private javax.swing.JTextField txtApellido1;
    private javax.swing.JTextField txtApellido2;
    private javax.swing.JTextField txtBusquedaId;
    private javax.swing.JFormattedTextField txtEdad;
    private javax.swing.JFormattedTextField txtEmpleados;
    private javax.swing.JTextField txtIdentificacion;
    private javax.swing.JFormattedTextField txtIngreso;
    private javax.swing.JFormattedTextField txtMeses;
    private javax.swing.JFormattedTextField txtMetros;
    private javax.swing.JFormattedTextField txtMonto;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JFormattedTextField txtProductos;
    // End of variables declaration//GEN-END:variables
}
